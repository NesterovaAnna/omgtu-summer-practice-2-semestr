#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №1. Знакомство с потоками.

**Цель:** Познакомиться с возможностями класса System.Thread платформы .NET Framework.

**Результаты:** После выполнения работы Вы сможете:
1. Запускать длительные операции в отдельном потоке.
2. Завершать поток.
3. Дожидаться завершения выполнения потока. 


**Материалы для самостоятельного изучения**.
1. [Основы управления потоками](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-basics)
2. [Использование потоков](https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading)
3. [Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier)
4. [Interlocked операции](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0)

## Задание.
Реализовать вычисление определенного интеграла методом трапеции в несколько потоков.

Отрезок, на котором происходит вычисление, разбивается на отрезки по количеству потоков. Для каждого отрезка значение 
интеграла считается в отдельном потоке, после завершения вычисоения полученный рельтаты суммирутся.

**Указание**.
1. Для суммирования результатов удобно воспользоваться разделяемой переменной, к которой будут прибалятся результаты вычисления прямо в самом потоке. Для синхронизации операций сложения лучше всего восользоваться [Interlocked операцией](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0).
2. Основная функция долна дождаться завершения всех потоков, которые вычисляют значение на отрезках, прежде чем возвратить результат. Для этого удобнее всего использовать Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier).

#!csharp

//
// Вычисление определенного интеграла
//
using System.Threading;
class DefiniteIntegral
{
    //
    // a, b - границы отрезка, на котором происходит вычисление опредленного интеграла
    // function - функция, для которой вычисляется определнный интеграл
    // step - размер одного шага разбиения
    // threadsNumber - число потоков, которые используются для вычислений
    //
    public static double Solve(double a, double b, Func<double, double> function, double step, int threadsNumber)
    {
        double result = 0.0; // Переменная для хранения общего результата
        Barrier barrier = new Barrier(threadsNumber + 1); // Барьер для синхронизации потоков
        double segmentLength = (b - a) / threadsNumber; // Длина отрезка для каждого потока

        // Запускаем потоки для каждого отрезка
        for (int i = 0; i < threadsNumber; i++)
        {
            int threadIndex = i;
            Thread thread = new Thread(() =>
            {
                double start = a + threadIndex * segmentLength; // Начало отрезка для текущего потока
                double end = start + segmentLength; // Конец отрезка для текущего потока
                double sum = 0.0; // Частичный результат вычисления интеграла на отрезке

                // Вычисление интеграла методом трапеций на отрезке
                for (double x = start + step; x < end; x += step)
                {
                    sum += function(x);
                }

                // Добавление частичного результата к общему результату с помощью Interlocked.Exchange
                double partialResult = step * ((function(start) + function(end)) / 2 + sum); 
                Interlocked.Exchange(ref result, result + partialResult); // Атомарное добавление с помощью Exchange

                // Сообщаем барьеру, что поток завершил свою работу
                barrier.SignalAndWait();
            });
            thread.Start();
        }

        // Основной поток ждет, пока все потоки не завершат свою работу
        barrier.SignalAndWait();
        barrier.Dispose();

        return result;
    }
}

#!csharp

#r "nuget: xunit, 2.8.1"

using Xunit;

static double X(double x) => x;
static double  SIN(double x) => Math.Sin(x);

class Program
{
    static void Main(string[] args)
    {
        // Тестирование
        Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, X, 1e-4, 2), 1e-4);

        Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, SIN, 1e-5, 8), 1e-4);

        Assert.Equal(50, DefiniteIntegral.Solve(0, 10, X, 1e-6, 8), 1e-5);
    }
}
